;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; startup:
;;          1 = kernel
;;          2 = MM
;;          3 = FS
;;          4 = init
;;          5 = fsck

    ; MODULE	Zux_crt0_asm_m4

    INCLUDE "zcc_opt.def"
    
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     
    ;SECTION CODE

IF      (startup=1)

;   KERNEL

        ;section code_rst_0
            include(`code_rst_0.asm.inc')
        ;section code_rst_0_end
        
        ;section code_rst_8
            include(`code_rst_8.asm.inc')
        ;section code_rst_8_end
        
        ;section code_rst_10
            include(`code_rst_10.asm.inc')
        ;section code_rst_10_end
        
        ;section code_rst_18
            include(`code_rst_18.asm.inc')
        ;section code_rst_18_end
        
        ;section code_rst_20
            include(`code_rst_20.asm.inc')
        ;section code_rst_20_end
        
        ;section code_rst_28
            include(`code_rst_28.asm.inc')
        ;section code_rst_28_end
        
        ;section code_rst_30
            include(`code_rst_30.asm.inc')
        ;section code_rst_30_end
        
        ;section code_rst_38
            include(`code_rst_38.asm.inc')
        ;section code_rst_38_end
        
        ;section code_sizes
            include(`sizes.asm.inc')
        ;section code_sizes_end
        
        ;section code_nmi
            include(`code_nmi.asm.inc')
        ;section code_nmi_end
        
        ;section code_booting
            include(`booting.asm.inc')
        ;section code_booting_end

        ;section code_compiler
        
        defc    K_STACK_BYTES = 256 ; kernel/const.h
ZUX:
            ld      de, K_STACK_BYTES
            EXTERN  _k_stack
            ld      hl, _k_stack
            add     hl, de
            ld      sp, hl
            im      1               ; RST 38H
        ;section code_compiler_end

ENDIF
IF    (startup=2)

;   MM
        INCLUDE "mm_org.inc"    ; generated by compiling kernel. It's kernel's length
        
        ;section code_compiler
        
            org MM_ORG
            
;            jp  _start

;            defw 0xBEEF         ; MM's Magic Number
;            defs 7*2            ; first 8 words of MM, FS, INIT are for stack
;            defw 0 ;    offset dgroup:@END  ; first free memory
;            defw 0

_start:
            defc    MM_STACK_BYTES = 2048 + 384 ; mm\const.h
            
            ld  de, MM_STACK_BYTES
            EXTERN  _mm_stack
            ld  hl, _mm_stack
            add hl, de
            ld sp, hl
        ;section code_compiler_end

ELIF    (startup=3)

;   FS

        ; INCLUDE "../mm_org.inc"
        INCLUDE "fs_org.inc"    ; generated by compiling MM. It's MM's length

        ;section code_compiler
            
            ; org MM_ORG + FS_ORG ; compute 
            org FS_ORG
            
            jp  _start

._data_org  defw 0xDADA         ; FS's Magic Number
            defs 7*2            ; first 8 words of MM, FS, INIT are for stack
._brksize   defw 0 ;    offset dgroup:@END  ; first free memory
._sp_limit  defw 0

_start:
            defc    FS_STACK_BYTES = 512    ; fs\const.h
            
            ld  de, FS_STACK_BYTES
            EXTERN  _fstack
            ld  hl, _fstack
            add hl, de
            ld sp, hl
        ;section code_compiler_end

ENDIF
IF    (startup=4)

; init

        INCLUDE "init_org.inc"
        
        ;section code_compiler
            
            ; org MM_ORG + FS_ORG +  INIT_org   ; compute 
            org INIT_ORG
            
            EXTERN  _stackpt
            ld  sp, (_stackpt)
            
ENDIF
IF    (startup=5)

        ;section code_rst_0
            include(`code_rst_0.asm.inc')
        ;section code_rst_0_end
        
        ;section code_rst_8
            include(`code_rst_8.asm.inc')
        ;section code_rst_8_end
        
        ;section code_rst_10
            include(`code_rst_10.asm.inc')
        ;section code_rst_10_end
        
booting:

ENDIF

        ;section code_compiler
            
            ; EXTERN  __bss_compiler
            ; ; __bss_compiler
            ; EXTERN  __bss_compiler_size
            
; _crt0_init_bss:
            ; xor     a
            ; ld      hl, __bss_compiler
            ; ld      bc, __bss_compiler_size
            ; ld      d, h
            ; ld      e, l
            ; inc     de
            ; ld      (hl), a
            ; ldir

; Zux_crt0.asm.m4 is common CRT0 for all modules
; Linker generates different _main entry points for everyone

            EXTERN  _main
            call    _main
.halt:      jr      halt    ; this should never be executed
        ;section code_compiler_end
        
        ;SECTION CODE_END

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ;SECTION DATA

        ;SECTION DATA_END

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        ;SECTION BSS

        ;SECTION BSS_END

;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        defc __crt_model = 0

INCLUDE  "crt/classic/crt_section_standard.asm"

SECTION code_crt_init
crt0_init_bss:
    EXTERN  __BSS_head
    EXTERN  __BSS_END_tail

SECTION code_crt_init_exit
    ret
SECTION code_crt_exit
crt0_exit:
; Teardown code can go here
SECTION code_crt_exit_exit
    ret

SECTION bss_crt